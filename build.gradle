group = "com.youhujia.solar"
version = "1.0.0"

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
    jcenter()
    mavenLocal()
}


if (project.hasProperty("buildPro") && buildPro == 'release') {
    repositories {
        maven { url "http://maven.zhushou.dev.youhujia.com/nexus/content/repositories/releases/" }
    }
} else {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    repositories {
        maven { url "http://maven.zhushou.dev.youhujia.com/nexus/content/repositories/yhj-develop/" }
    }
}



buildscript {
    ext {
        springBootVersion = '1.3.7.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply from: 'gradle/checkstyle.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.SR6'
    }
}

dependencies {
    compile group: "org.springframework.boot", name: "spring-boot-starter-actuator", version: "${springBootVersion}"
    compile group: "org.springframework.boot", name: "spring-boot-devtools", version: "$springBootVersion"
    compile group: "org.springframework.boot", name: "spring-boot-starter-web", version: "$springBootVersion"
    compile group: "org.springframework.boot", name: "spring-boot-starter-data-jpa", version: "$springBootVersion"

    compile group: "org.springframework.cloud", name: "spring-cloud-starter-config"
    compile group: "org.springframework.cloud", name: "spring-cloud-starter-eureka"

    compile group: 'com.google.zxing', name: 'core', version: '3.3.0'
    compile group: "com.alibaba", name: "fastjson", version: "1.2.17"
    compile group: "com.netflix.feign", name: "feign-okhttp", version: "8.16.2"
    compile group: "com.google.protobuf", name: "protobuf-java", version: "2.6.1"
    compile group: "com.googlecode.protobuf-java-format", name: "protobuf-java-format", version: "1.2"
    compile group: "org.flywaydb", name: "flyway-core", version: "4.0.3"
    compile group: "org.springframework.cloud", name: "spring-cloud-starter-feign"
    compile group: 'com.netflix.feign', name: 'feign-slf4j', version: '8.16.2'
    compile group: 'org.springframework', name: 'spring-aspects'
    compile group: 'org.apache.commons', name: 'commons-pool2'
    compile group: 'redis.clients', name: 'jedis', version: '2.7.2'
    compile group: 'org.apache.commons', name: 'commons-pool2'
    compile "net.sf.json-lib:json-lib:2.2.1:jdk15"

    runtime group: "mysql", name: "mysql-connector-java", version: "5.1.39"

    testCompile group: "org.springframework.boot", name: "spring-boot-starter-test", version: "$springBootVersion"
}

    if (project.hasProperty("buildPro") && buildPro == 'release') {
        println("release version")
        dependencies {
            compile group: "com.youhujia.halo", name: "youhujia-halo", version: "v2.0.19"
        }
    } else {
        println("develop version")
        dependencies {
            compile group: "com.youhujia.halo", name: "youhujia-halo", version: "v2.0.2-SNAPSHOT", changing: true
    }


    def execute = { cmdString ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine cmdString
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    def getGitHash = { ->
        return execute(["git", "rev-parse", "--short", "HEAD"])
    }
    def getNowTime = { ->
        return execute(["date", "+%s"])
    }
    def gitHash = "${getGitHash}"
    def buildJar = "build/libs/${jar.baseName}-${version}.jar"
    def buildTag = "${project.version}-${gitHash}"
    def buildImage = "${project.group}/${jar.baseName}"
    def buildVersion = "${project.version}-${gitHash}"
    def nowTime = "${getNowTime()}"
    def TZ = "Asia/Shanghai"

    task buildDocker(type: Docker, dependsOn: build) {
        push = false
        applicationName = jar.baseName
        tagVersion = buildTag

        docker {
            baseImage "java:8-jre"
            maintainer "Youhujia, Inc. Backend Awesome Team"
            setEnvironment "CONFIG_URL", "$System.env.CONFIG_URL"
            setEnvironment "ENV", "$System.env.ENV"
            addFile "${buildJar}", "/"
            addFile "entrypoint.sh", "/"
            volume "/tmp"
            runCommand "ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone"
            runCommand "mkdir /logs"
            runCommand "mkdir /logs/applogs"
            runCommand "mkdir /logs/accesslogs"
            entryPoint(["/entrypoint.sh"])
            exposePort System.env.PORT as Integer
            exposePort System.env.MPORT as Integer
        }
    }

    task runDocker() {
        doLast {
            execute(["docker", "run",
                     "-p", "$System.env.PORT:$System.env.PORT",
                     "-p", "$System.env.MPORT:$System.env.MPORT",
                     "-e", "IP=$System.env.IP",
                     "-e", "PORT=$System.env.PORT",
                     "-e", "MPORT=$System.env.MPORT",
                     "-v", "/data/sls/applogs:/logs/applogs",
                     "-v", "/data/sls/accesslogs:/logs/accesslogs",
                     "--net=host",
                     "-it", "-d", "--name", "${nowTime}",
                     "${buildImage}:${buildVersion}", "java"])
        }
    }

    task go(dependsOn: [buildDocker, runDocker]) {
        println "\nBig brother is watching you!\n"
    }
}
